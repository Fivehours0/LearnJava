<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--因为使用了注解，声明组件扫描器-->
    <context:component-scan base-package="first_anno"/>
    <context:component-scan base-package="get_require_param"/>
    <context:component-scan base-package="return_type"/>
    <context:component-scan base-package="static_resource"/>

    <!--@ResponseBody注解驱动, 在return_type包中的readme中有解释改语句的作用
        default-servlet-handler和@ResponseBody注解有冲突，需加入annotation-driven解决问题-->
    <mvc:annotation-driven/>

    <!--第一种处理静态资源的方式(<url-pattern>/</url-pattern>设置/导致无法处理静态资源的问题解决方案1)：<mvc:default-servlet-handler/>

    需要在springmvc配置文件加入 <mvc:default-servlet-handler>
    原理是：加入这个标签后，框架会创建控制器对象DefaultServletHttpRequestHandler
    （类似自己创建的MyController）,这个对象可以把接收到的请求转发给tomcat的名字叫default的servlet
    -->
<!--    <mvc:default-servlet-handler/>-->


    <!--第二种处理静态资源的方式
        mvc：resources加入后框架会创建 ResourceHttpRequestHandler这个处理器对象
        让这个对象处理静态资源的访问，不依赖tomcat服务器。
        mapping:访问静态资源的uri地址，使用通配符 **
        location:静态资源在你的项目中的目录位置

        img/**: 表示 img/p1.jpg, img/user/log.jpg, img/order/history/list.png等路径都能被访问到

        为了方便，一般把静态资源统一放在 static 文件夹下，这样一条语句就可以
        <mvc:resources mapping="/static/**" location="/static/" />

        注意<mvc:resources>和@RequestMapping有一定冲突, 加入<mvc:annotation-driven/>解决
	-->
    <mvc:resources mapping="/img/**" location="/img/" />
    <mvc:resources mapping="/html/**" location="/html/" />
    <mvc:resources mapping="/js/**" location="/js/" />


    <!--声明 springmvc框架中的视图解析器，帮助开发人员设置视图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：视图文件位置-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!--后缀：视图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>